import{pascalCase as e,pascalCaseTransformMerge as r}from"pascal-case";import{camelCase as t,camelCaseTransformMerge as n}from"camel-case";function a(){return(a=Object.assign||function(e){for(var r=1;r<arguments.length;r++){var t=arguments[r];for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])}return e}).apply(this,arguments)}const i=e=>Array.isArray(e)?e:[e],o=["id","internal","fields","parent","children"],l=({typePrefix:l,fieldPrefix:c=l,createNodeId:s,createContentDigest:f})=>{const d=t=>((...t)=>e(t.filter(e=>null!=e).join(" "),{transform:r}))(l,...i(t)),p=e=>((...e)=>t(e.filter(e=>null!=e).join(" "),{transform:n}))(c,...i(e)),m=e=>s([l,...i(e)].filter(e=>null!=e).join(" "));return{createTypeName:d,createFieldName:p,createNodeId:m,createNodeFactory:(e,{idIsGloballyUnique:r=!1}={})=>t=>{const n=m(r?t.id.toString():[...i(e),t.id.toString()]),l=a({},t,{id:n,internal:{type:d(e),contentDigest:f(t)}});for(const e of o)e in t&&(l[p(e)]=t[e]);return l}}};export{l as createNodeHelpers};
//# sourceMappingURL=gatsby-node-helpers.modern.js.map
